user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log info;

daemon off;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  65;

	server {
		listen 80;

		location / {
			root /www;
		}

		location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
            }

            root /tmp;
            add_header Cache-Control no-cache;

{{if exists "/live/cors"}}
            # CORS
            # based on: https://gist.github.com/algal/5480916
            # based on: https://gist.github.com/alexjs/4165271

            # if the request included an Origin: header with an origin on the whitelist,
            # then it is some kind of CORS request.

            if ($http_origin ~* ${{getv "/live/cors"}}) {
                set $cors "true";
            }

            # Nginx doesn't support nested If statements, so we use string
            # concatenation to create a flag for compound conditions

            # OPTIONS indicates a CORS pre-flight request
            if ($request_method = 'OPTIONS') {
                set $cors "${cors}options";
            }

            # non-OPTIONS indicates a normal CORS request
            if ($request_method = 'GET') {
                set $cors "${cors}get";
            }
            if ($request_method = 'POST') {
                set $cors "${cors}post";
            }

            # if it's a GET or POST, set the standard CORS responses header
            if ($cors = "trueget") {
                # Tells the browser this origin may make cross-origin requests
                # (Here, we echo the requesting origin, which matched the whitelist.)
                add_header 'Access-Control-Allow-Origin' "$http_origin";
                # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
                add_header 'Access-Control-Allow-Credentials' 'true';
            }

            if ($cors = "truepost") {
                # Tells the browser this origin may make cross-origin requests
                # (Here, we echo the requesting origin, which matched the whitelist.)
                add_header 'Access-Control-Allow-Origin' "$http_origin";
                # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
                add_header 'Access-Control-Allow-Credentials' 'true';
            }

            # if it's OPTIONS, then it's a CORS preflight request so respond immediately with no response body
            if ($cors = "trueoptions") {
                # Tells the browser this origin may make cross-origin requests
                # (Here, we echo the requesting origin, which matched the whitelist.)
                add_header 'Access-Control-Allow-Origin' "$http_origin";
                # in a preflight response, tells browser the subsequent actual request can include user credentials (e.g., cookies)
                add_header 'Access-Control-Allow-Credentials' 'true';

                # Tell browser to cache this pre-flight info for 20 days
                add_header 'Access-Control-Max-Age' 1728000;

                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';

                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';

                # no body in this response
                add_header 'Content-Length' 0;
                # (should not be necessary, but included for non-conforming browsers)
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                # indicate successful return with no content
                return 204;
            }
{{end}}
		}

        location /p/ {
            secure_link_secret "{{getv "/live/secret"}}";

            if ($secure_link = "") {
                return 403;
            }

            rewrite ^ /secure/$secure_link;
        }

        location /secure/stat {
            internal;
            rtmp_stat all;
        }

        location /secure/info {
            internal;
            rtmp_stat all;
            rtmp_stat_stylesheet /info.xsl;
        }

        location /info.xsl {
            root /www;
        }

    }

}

rtmp_auto_push on;

rtmp {

    server {
        listen 1935;
        notify_method get;

        chunk_size 131072;
        max_message 12M;
        buflen 2s;

        application pub_{{getv "/live/secret"}} {
            live on;
            drop_idle_publisher 5s;
            allow play 127.0.0.1;
            deny play all;

            exec_push /usr/local/bin/ffmpeg -i rtmp://localhost/pub_{{getv "/live/secret"}}/$name
                {{range getvs "/live/encodings/*" -}}
                    {{- $encoding := split . ":" -}}
                    {{- $scale := index $encoding 2 -}}
                    {{- $video_bitrate := atoi (index $encoding 0) -}}
                    {{- $audio_bitrate := atoi (index $encoding 1) -}}
                    {{- $total_bitrate := add $video_bitrate $audio_bitrate }}
                    -c:a libfdk_aac {{- if lt $audio_bitrate 96 }} -profile:a aac_he {{- end}}
                    -b:a {{$audio_bitrate}}k -c:v libx264 -b:v {{$video_bitrate}}k -tune zerolatency
                    -profile:v high -level 4.0 -maxrate {{$video_bitrate}}k -bufsize {{$video_bitrate}}k
                    -filter:v scale={{$scale}}
                    -f flv rtmp://localhost/hls/$name_{{$total_bitrate -}}
                {{- end -}}
                {{- range getvs "/live/facebook/*"}}
                    -filter:v scale=1080x720 -c:a libfdk_aac -b:a 128k
                    -c:v libx264 -b:v 2M -maxrate 2M -bufsize 4M
                    -profile:v high -level 4.2 -tune zerolatency
                    -f flv {{.}}
                {{- end}};
                {{- range getvs "/live/downstreams/*"}}
                    -c:a copy -c:v copy -f flv {{.}}
                {{- end}};

        }

        application player {
            live on;

            allow publish 127.0.0.1;
            deny publish all;

            pull rtmp://localhost/pub_{{getv "/live/secret"}} live=1;

            wait_key on;
            wait_video on;
        }

        application hls {
            live on;
            allow publish 127.0.0.1;
            deny publish all;

            hls on;
            hls_path /tmp/hls;
            hls_fragment 5s;
            hls_nested on;
            hls_continuous on;

            # CODECS values: https://developer.apple.com/documentation/http_live_streaming/hls_authoring_specification_for_apple_devices/hls_authoring_specification_for_apple_devices_appendices
            {{range getvs "/live/encodings/*"}}
            {{- $encoding := split . ":" -}}
            {{- $video_bitrate := atoi (index $encoding 0) -}}
            {{- $audio_bitrate := atoi (index $encoding 1) -}}
            {{- $total_bitrate := add $video_bitrate $audio_bitrate }}
            hls_variant _{{$total_bitrate}}   BANDWIDTH={{mul $total_bitrate 1000}} CODECS="avc1.4d0028,
                {{- if lt $audio_bitrate 96 -}}
                    mp4a.40.5
                {{- else -}}
                    mp4a.40.2
                {{- end -}}
            ";
            {{- end}}
        }

    }
}
